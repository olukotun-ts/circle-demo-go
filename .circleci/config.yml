version: 2.1

orbs:
  kubernetes: circleci/kubernetes@0.11.0
  aws-ecr: circleci/aws-ecr@7.2.0
  aws-eks: circleci/aws-eks@1.1.0
  docker: circleci/docker@1.0.1
  gcp-gcr: circleci/gcp-gcr@0.15.0

jobs:
  build:
    parameters:
      gover: 
        description: The version of the Go compiler to use.
        type: string
    docker:
      - image: circleci/golang:<< parameters.gover >>
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run: mkdir -p workspace/<< parameters.gover >>
      - run: go test -c -o workspace/<< parameters.gover >>/test
      - run: CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o workspace/<< parameters.gover >>/circleci
      - run: cp -r templates workspace/<< parameters.gover >>/
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - persist_to_workspace:
          root: workspace
          paths:
            - << parameters.gover >>/test
            - << parameters.gover >>/circleci
            - << parameters.gover >>/templates
  test:
    parameters:
      gover: 
        description: The version of the Go compiler to use.
        type: string
      chromever: 
        description: The version of the Chrome browser to use.
        type: string
    docker:
      - image: chromedp/headless-shell:<< parameters.chromever >>
      - image: mysql:latest
        environment:
          MYSQL_ROOT_PASSWORD: example
      - image: redis:latest
    resource_class: large
    working_directory: /go/src/github.com/mentat/circle-demo-go
    steps:
      - run: apt-get update && apt-get -y install ca-certificates
      - attach_workspace:
          at: /tmp/workspace
      - run: cd /tmp/workspace/<< parameters.gover >> && ./test
  security-sast:
    docker:
      - image: securego/gosec:latest
    steps:
      - checkout
      - run: gosec -fmt junit-xml -out junit.xml ./...
      - store_test_results:
          path: .
  create-eks-deployment:
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.medium
    parameters:
      tag:
        description: |
          Tag to use for image.
        type: string
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      namespace:
        description: |
          The deployment namespace.
        type: string
        default: ""
      container:
        description: |
          The deployment container including the registry and path. 
        type: string
    environment:
      IMAGE: << parameters.container >>
    steps:
      - checkout
      - run: sudo apt-get update && sudo apt-get install -y gettext-base
      - run: cat k8s/deployment.yml | envsubst > k8s/deployment-final.yml
      - run: cat k8s/deployment-final.yml
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          aws-region: "${AWS_REGION}"
          install-kubectl: true
      - when:
          condition: << parameters.namespace >>
          steps:
            - run: kubectl create namespace << parameters.namespace >> || echo "Namespace already exists."
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          namespace: << parameters.namespace >>
          resource-file-path: k8s/deployment-final.yml
          resource-name: deployment/demo-app
      - when:
          condition: << parameters.namespace >>
          steps:    
            - run: kubectl -n << parameters.namespace >> get svc
  build-and-push:
    executor: gcp-gcr/default
    parameters:
      tag:
        description: |
          Tag to use for image.
        type: string
      registry:
        description: |
          Registry to use for image.
        type: string
        default: gcr.io
      image:
        description: |
          Image name.
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: /home/circleci/project
      - gcp-gcr/gcr-auth
      - gcp-gcr/build-image:
          image: << parameters.image >>
          tag: << parameters.tag >>
          registry-url: << parameters.registry >>
      - gcp-gcr/push-image:
          tag: << parameters.tag >>
          image: << parameters.image >>
          registry-url: << parameters.registry >>

workflows:
  version: 2
  build-test-push:
    jobs:
      - security-sast
      - build:
          matrix:
            parameters:
              gover: ["1.13", "1.14"]
          requires:
            - security-sast
      - test:
          matrix:
            parameters:
              gover: ["1.13", "1.14"]
              chromever: ["latest"]
          requires:
            - build
      - build-and-push:
          context:
            - cloudSecrets
            - gcr
          tag: $CIRCLE_SHA1
          image: demo-app
          requires:
            - test
